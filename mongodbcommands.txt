> help
 db.help()                    help on db methods
 db.mycoll.help()             help on collection methods
 sh.help()                    sharding helpers
 rs.help()                    replica set helpers
 help admin                   administrative help
 help connect                 connecting to a db help
 help keys                    key shortcuts
 help misc                    misc things to know
 help mr                      mapreduce
 show dbs                     show database names
 show collections             show collections in current database
 show users                   show users in current database
 show profile                 show most recent system.profile entries with time >= 1ms
 show logs                    show the accessible logger names
 show log [name]              prints out the last segment of log in memory, 'global' is default
 use <db_name>                set current database
 db.foo.find()                list objects in collection foo
 db.foo.find( { a : 1 } )     list objects in foo where a == 1
 it                           result of the last line evaluated; use to further iterate
 DBQuery.shellBatchSize = x   set default number of items to display on shell
 exit                         quit the mongo shell
 
> db.help()
DB methods:
 db.addUser(username, password[, readOnly=false])
 db.adminCommand(nameOrDocument) - switches to 'admin' db, and runs command [just calls db.runCommand(...) ]
 db.auth(username, password)
 db.cloneDatabase(fromhost)
 db.commandHelp(name) returns the help for the command
 db.copyDatabase(fromdb, todb, fromhost)
 db.createCollection(name, { size : ..., capped : ..., max : ... } )
 db.currentOp() displays currently executing operations in the db
 db.dropDatabase()
 db.eval(func, args) run code server-side
 db.fsyncLock() flush data to disk and lock server for backups
 db.fsyncUnlock() unlocks server following a db.fsyncLock()
 db.getCollection(cname) same as db['cname'] or db.cname
 db.getCollectionNames()
 db.getLastError() - just returns the err msg string
 db.getLastErrorObj() - return full status object
 db.getMongo() get the server connection object
 db.getMongo().setSlaveOk() allow queries on a replication slave server
 db.getName()
 db.getPrevError()
 db.getProfilingLevel() - deprecated
 db.getProfilingStatus() - returns if profiling is on and slow threshold
 db.getReplicationInfo()
 db.getSiblingDB(name) get the db at the same server as this one
 db.hostInfo() get details about the server's host
 db.isMaster() check replica primary status
 db.killOp(opid) kills the current operation in the db
 db.listCommands() lists all the db commands
 db.loadServerScripts() loads all the scripts in db.system.js
 db.logout()
 db.printCollectionStats()
 db.printReplicationInfo()
 db.printShardingStatus()
 db.printSlaveReplicationInfo()
 db.removeUser(username)
 db.repairDatabase()
 db.resetError()
 db.runCommand(cmdObj) run a database command.  if cmdObj is a string, turns it into { cmdObj : 1 }
 db.serverStatus()
 db.setProfilingLevel(level,<slowms>) 0=off 1=slow 2=all
 db.setVerboseShell(flag) display extra information in shell output
 db.shutdownServer()
 db.stats()
 db.version() current version of the server

 

> db.collections.help()
DBCollection help
 db.collections.find().help() - show DBCursor help
 db.collections.count()
 db.collections.copyTo(newColl) -duplicates collection by copying all docs to newColl;no indexes r copied.
 db.collections.convertToCapped(maxBytes) - calls {convertToCapped:'collections', size:maxBytes}} command
 db.collections.dataSize()
 db.collections.distinct( key ) - eg. db.collections.distinct( 'x' )
 db.collections.drop() drop the collection
 db.collections.dropIndex(name)
 db.collections.dropIndexes()
 db.collections.ensureIndex(keypattern[,options]) -options is object with these possible fields:name, unique, dropDups
 db.collections.reIndex()
 db.collections.find([query],[fields]) - query is an optional query filter. fields is optional set of fields to return. e.g. db.collections.find({x:77} , {name:1, x:1} )
 db.collections.find(...).count()
 db.collections.find(...).limit(n)
 db.collections.find(...).skip(n)
 db.collections.find(...).sort(...)
 db.collections.findOne([query])
 db.collections.findAndModify( { update : ... , remove : bool [, query: {}, sort: {}, 'new': false] } )
 db.collections.getDB() get DB object associated with collection
 db.collections.getIndexes()
 db.collections.group( { key : ..., initial: ..., reduce : ...[, cond: ...] } )
 db.collections.insert(obj)
 db.collections.mapReduce( mapFunction , reduceFunction , <optional params> )
 db.collections.remove(query)
 db.collections.renameCollection( newName , <dropTarget> ) renames the collection.
 db.collections.runCommand( name , <options> ) runs a db command with the given name where the first param is the collection name
 db.collections.save(obj)
 db.collections.stats()
 db.collections.storageSize() - includes free space allocated to this collection
 db.collections.totalIndexSize() - size in bytes of all the indexes
 db.collections.totalSize() - storage allocated for all data and indexes
 db.collections.update(query, object[, upsert_bool, multi_bool]) - instead of two flags, you can pass an object with fields: upsert, multi
 db.collections.validate( <full> ) - SLOW
 db.collections.getShardVersion() - only for use with sharding
 db.collections.getShardDistribution() - prints statistics about data distribution in the cluster
 db.collections.getSplitKeysForChunks( <maxChunkSize> ) -calculates split points over all chunks and returns splitter function

 

> db.index.help()
Index help
 db.index.find().help() - show DBCursor help
 db.index.count()
 db.index.copyTo(newColl) - duplicates collection by copying all documents to newColl; no indexes are copied.
 db.index.convertToCapped(maxBytes) - calls {convertToCapped:'index', size:maxBytes}} command
 db.index.dataSize()
 db.index.distinct( key ) - eg. db.index.distinct( 'x' )
 db.index.drop() drop the collection
 db.index.dropIndex(name)
 db.index.dropIndexes()
 db.index.ensureIndex(keypattern[,options]) - options is an object with these possible fields: name, unique, dropDups
 db.index.reIndex()
 db.index.find([query],[fields]) - query is an optional query filter. fields is optional set of fields to return.
   e.g. db.index.find( {x:77}, {name:1, x:1} )
 db.index.find(...).count()
 db.index.find(...).limit(n)
 db.index.find(...).skip(n)
 db.index.find(...).sort(...)
 db.index.findOne([query])
 db.index.findAndModify( { update : ... , remove : bool [, query: {}, sort: {}, 'new': false] } )
 db.index.getDB() get DB object associated with collection
 db.index.getIndexes()
 db.index.group( { key : ..., initial: ..., reduce : ...[, cond: ...] } )
 db.index.insert(obj)
 db.index.mapReduce( mapFunction , reduceFunction , <optional params> )
 db.index.remove(query)
 db.index.renameCollection( newName , <dropTarget> ) renames the collection.
 db.index.runCommand( name , <options> ) runs a db command with the given name where the first param is the collection name
 db.index.save(obj)
 db.index.stats()
 db.index.storageSize() - includes free space allocated to this collection
 db.index.totalIndexSize() - size in bytes of all the indexes
 db.index.totalSize() - storage allocated for all data and indexes
 db.index.update(query, object[, upsert_bool, multi_bool]) - instead of two flags, you can pass an object with fields: upsert, multi
 db.index.validate( <full> ) - SLOW
 db.index.getShardVersion() - only for use with sharding
 db.index.getShardDistribution() - prints statistics about data distribution in the cluster
 db.index.getSplitKeysForChunks( <maxChunkSize> ) - calculates split points over all chunks and returns splitter function

 

> sh.help()
Sharding help
 sh.addShard( host )                       server:port OR setname/server:port
 sh.enableSharding(dbname)                 enables sharding on the database dbname
 sh.shardCollection(fullName,key,unique)   shards the collection
 sh.splitFind(fullName,find)               splits the chunk that find is in at the median
 sh.splitAt(fullName,middle)               splits the chunk that middle is in at middle
 sh.moveChunk(fullName,find,to)            move the chunk where 'find' is to 'to' (name of shard)
 sh.setBalancerState( <bool on or not> )   turns the balancer on or off true=on, false=off
 sh.getBalancerState()                     return true if on, off if not
 sh.isBalancerRunning()                    return true if the balancer is running on any mongos
 sh.addShardTag(shard,tag)                 adds the tag to the shard
 sh.removeShardTag(shard,tag)              removes the tag from the shard
 sh.status()                               prints a general overview of the cluster

 

> rs.help()Replication help
 rs.status()                     { replSetGetStatus : 1 } checks repl set status
 rs.initiate()                   { replSetInitiate : null } initiates set with default settings
 rs.initiate(cfg)                { replSetInitiate : cfg } initiates set with configuration cfg
 rs.conf()                       get the current configuration object from local.system.replset
 rs.reconfig(cfg)                updates the configuration of a running replica set with cfg (disconnects)
 rs.add(hostportstr)             add a new member to the set with default attributes (disconnects)
 rs.add(membercfgobj)            add a new member to the set with extra attributes (disconnects)
 rs.addArb(hostportstr)          add a new member which is arbiterOnly:true (disconnects)
 rs.stepDown([secs])             step down as primary (momentarily) (disconnects)
 rs.syncFrom(hostportstr)        make a secondary to sync from the givenmember
 rs.freeze(secs)                 make a node ineligible to become primary for the time specified
 rs.remove(hostportstr)          remove a host from the replica set (disconnects)
 rs.slaveOk()                    shorthand for db.getMongo().setSlaveOk()
 db.isMaster()                   check who is primary reconfiguration helpers disconnect from the database so the shell will display an error, even if the command succeeds.
 see also http://<mongod_host>:28017/_replSet for additional diagnostic info

 

> help admin
 ls([path])                      list files
 pwd()                           returns current directory
 listFiles([path])               returns file list
 hostname()                      returns name of this host
 cat(fname)                      returns contents of text file as a string
 removeFile(f)                   delete a file or directory
 load(jsfilename)                load and execute a .js file
 run(program[, args...])         spawn a program and wait for its completion
 runProgram(program[, args...])  same as run(), above
 sleep(m)                        sleep m milliseconds
 getMemInfo()                    diagnostic
 
> help connect

Normally one specifies the server on the mongo shell command line.  Run mongo --help to see those options.
Additional connections may be opened:

    var x = new Mongo('host[:port]');
    var mydb = x.getDB('mydb');
  or
    var mydb = connect('host[:port]/mydb');

Note: the REPL prompt only auto-reports getLastError() for the shell command line connection.

> help mr

See also http://dochub.mongodb.org/core/mapreduce

function mapf() {
  // 'this' holds current document to inspect
  emit(key, value);
}

function reducef(key,value_array) {
  return reduced_value;
}

db.mycollection.mapReduce(mapf, reducef[, options])

options
{[query : <query filter object>]
 [, sort : <sort the query.  useful for optimization>]
 [, limit : <number of objects to return from collection>]
 [, out : <output-collection name>]
 [, keeptemp: <true|false>]
 [, finalize : <finalizefunction>]
 [, scope : <object where fields go into javascript global scope >]
 [, verbose : true]}

 

> help misc
        b = new BinData(subtype,base64str)  create a BSON BinData value
        b.subtype()                         the BinData subtype (0..255)
        b.length()                          length of the BinData data in bytes
        b.hex()                             the data as a hex encoded string
        b.base64()                          the data as a base 64 encoded string

        b.toString()

        b = HexData(subtype,hexstr)         create a BSON BinData value from a hex string
        b = UUID(hexstr)                    create a BSON BinData value of UUID subtype
        b = MD5(hexstr)                     create a BSON BinData value of MD5 subtype
        "hexstr"                            string, sequence of hex characters (no 0x prefix)
        o = new ObjectId()                  create a new ObjectId
        o.getTimestamp()                    return timestamp derived from first 32 bits of the OID
        o.isObjectId()
        o.toString()
        o.equals(otherid)
        d = ISODate()                       like Date() but behaves more intuitively when used
        d = ISODate('YYYY-MM-DD hh:mm:ss')    without an explicit "new " prefix on construction
 
> help keys
Tab completion and command history is available at the command prompt.

Some emacs keystrokes are available too:
  Ctrl-A start of line
  Ctrl-E end of line
  Ctrl-K del to end of line

Multi-line commands
You can enter a multi line javascript expression.  If parens, braces, etc. are not closed, you will see a new line beginning with '...' characters.  Type the rest of your expression.  Press Ctrl-C to abort the data entry if you get stuck.